{"version":3,"sources":["../../node_modules/exif-js/exif.js","fixer.js"],"names":["EXIF","require","getURLBase64","url","Promise","resolve","reject","xhr","XMLHttpRequest","open","responseType","onload","status","blob","response","fileReader","FileReader","onloadend","e","result","target","readAsDataURL","onerror","err","send","getOri","file","getData","orientation","getTag","imgToCanvas","img","canvas","document","createElement","ctx","getContext","targetWidth","width","targetHeight","height","translate","rotate","Math","PI","drawImage","fixBySelector","selector","fixImg","dataset","iosfixed","then","src","toDataURL","base64","imgs","querySelectorAll","length","i","tagName","toLowerCase","crossOrigin","complete","console","log","computeSize","originWidth","originHeight","maxWidth","maxHeight","setWidth","round","setHeight","fixImgFile","option","opt","Object","assign","ratio","type","indexOf","oReader","compressSize","catch"],"mappings":";;AAmiCA,IAAA,GAniCA,WAEA,IAAA,GAAA,EAIA,EAAA,SAAA,GACA,OAAA,aAAA,EAAA,EACA,gBAAA,OACA,KAAA,YAAA,GADA,IAAA,EAAA,IAIA,oBAAA,SACA,oBAAA,QAAA,OAAA,UACA,QAAA,OAAA,QAAA,GAEA,QAAA,KAAA,GAZA,KAcA,KAAA,EAGA,IAAA,EAAA,EAAA,KAAA,CAGA,MAAA,cACA,MAAA,kBAGA,MAAA,aAGA,MAAA,kBACA,MAAA,kBACA,MAAA,0BACA,MAAA,yBAGA,MAAA,YACA,MAAA,cAGA,MAAA,mBAGA,MAAA,mBACA,MAAA,oBACA,MAAA,aACA,MAAA,qBACA,MAAA,sBAGA,MAAA,eACA,MAAA,UACA,MAAA,kBACA,MAAA,sBACA,MAAA,kBACA,MAAA,OACA,MAAA,oBACA,MAAA,gBACA,MAAA,kBACA,MAAA,eACA,MAAA,mBACA,MAAA,kBACA,MAAA,eACA,MAAA,cACA,MAAA,QACA,MAAA,cACA,MAAA,cACA,MAAA,cACA,MAAA,2BACA,MAAA,wBACA,MAAA,wBACA,MAAA,2BACA,MAAA,kBACA,MAAA,gBACA,MAAA,gBACA,MAAA,aACA,MAAA,YACA,MAAA,aACA,MAAA,iBACA,MAAA,eACA,MAAA,eACA,MAAA,oBACA,MAAA,wBACA,MAAA,mBACA,MAAA,cACA,MAAA,WACA,MAAA,aACA,MAAA,YACA,MAAA,2BACA,MAAA,uBAGA,MAAA,6BACA,MAAA,iBAGA,EAAA,EAAA,SAAA,CACA,IAAA,aACA,IAAA,cACA,MAAA,iBACA,MAAA,oBACA,MAAA,6BACA,IAAA,gBACA,IAAA,cACA,IAAA,4BACA,IAAA,cACA,IAAA,kBACA,IAAA,sBACA,IAAA,mBACA,IAAA,mBACA,IAAA,cACA,IAAA,cACA,IAAA,iBACA,IAAA,eACA,IAAA,eACA,IAAA,kBACA,IAAA,wBACA,IAAA,8BACA,IAAA,mBACA,IAAA,aACA,IAAA,wBACA,IAAA,oBACA,IAAA,sBACA,IAAA,WACA,IAAA,mBACA,IAAA,OACA,IAAA,QACA,IAAA,WACA,IAAA,SACA,MAAA,aAGA,EAAA,EAAA,QAAA,CACA,EAAA,eACA,EAAA,iBACA,EAAA,cACA,EAAA,kBACA,EAAA,eACA,EAAA,iBACA,EAAA,cACA,EAAA,eACA,EAAA,gBACA,EAAA,YACA,GAAA,iBACA,GAAA,SACA,GAAA,cACA,GAAA,WACA,GAAA,cACA,GAAA,WACA,GAAA,qBACA,GAAA,kBACA,GAAA,cACA,GAAA,qBACA,GAAA,kBACA,GAAA,sBACA,GAAA,mBACA,GAAA,oBACA,GAAA,iBACA,GAAA,qBACA,GAAA,kBACA,GAAA,sBACA,GAAA,qBACA,GAAA,eACA,GAAA,mBAIA,EAAA,EAAA,SAAA,CACA,IAAA,aACA,IAAA,cACA,IAAA,gBACA,IAAA,cACA,IAAA,4BACA,IAAA,eACA,IAAA,cACA,IAAA,kBACA,IAAA,eACA,IAAA,kBACA,IAAA,cACA,IAAA,cACA,IAAA,sBACA,IAAA,iBACA,IAAA,eACA,IAAA,kBACA,IAAA,oBACA,IAAA,mBACA,IAAA,mBACA,IAAA,uBAGA,EAAA,EAAA,aAAA,CACA,gBAAA,CACA,EAAA,cACA,EAAA,SACA,EAAA,iBACA,EAAA,oBACA,EAAA,mBACA,EAAA,mBACA,EAAA,iBACA,EAAA,gBACA,EAAA,kBAEA,aAAA,CACA,EAAA,UACA,EAAA,UACA,EAAA,wBACA,EAAA,OACA,EAAA,YACA,EAAA,UACA,EAAA,UACA,IAAA,SAEA,YAAA,CACA,EAAA,UACA,EAAA,WACA,EAAA,cACA,EAAA,gCACA,EAAA,QACA,EAAA,eACA,GAAA,iBACA,GAAA,QACA,GAAA,wCACA,GAAA,yCACA,GAAA,0CACA,GAAA,sCACA,GAAA,mBACA,GAAA,mBACA,GAAA,mBACA,GAAA,MACA,GAAA,MACA,GAAA,MACA,GAAA,MACA,GAAA,sBACA,IAAA,SAEA,MAAA,CACA,EAAA,qBACA,EAAA,cACA,EAAA,mCACA,EAAA,+BACA,EAAA,qCACA,GAAA,gEACA,GAAA,4DACA,GAAA,4CACA,GAAA,gCACA,GAAA,yBACA,GAAA,oDACA,GAAA,gDACA,GAAA,oBACA,GAAA,sCACA,GAAA,iEACA,GAAA,6DACA,GAAA,6DACA,GAAA,wFACA,GAAA,oFACA,GAAA,iDACA,GAAA,4EACA,GAAA,yEAEA,cAAA,CACA,EAAA,cACA,EAAA,6BACA,EAAA,6BACA,EAAA,+BACA,EAAA,+BACA,EAAA,mBACA,EAAA,kCAEA,iBAAA,CACA,EAAA,WACA,EAAA,YACA,EAAA,WACA,EAAA,eAEA,UAAA,CACA,EAAA,yBAEA,eAAA,CACA,EAAA,iBACA,EAAA,kBAEA,aAAA,CACA,EAAA,qBACA,EAAA,wBAEA,YAAA,CACA,EAAA,OACA,EAAA,cACA,EAAA,eACA,EAAA,gBACA,EAAA,kBAEA,SAAA,CACA,EAAA,SACA,EAAA,OACA,EAAA,QAEA,WAAA,CACA,EAAA,SACA,EAAA,iBACA,EAAA,mBAEA,UAAA,CACA,EAAA,SACA,EAAA,OACA,EAAA,QAEA,qBAAA,CACA,EAAA,UACA,EAAA,QACA,EAAA,aACA,EAAA,gBAEA,WAAA,CACA,EAAA,OAGA,WAAA,CACA,EAAA,GACA,EAAA,IACA,EAAA,KACA,EAAA,KACA,EAAA,IACA,EAAA,IACA,EAAA,MAYA,SAAA,EAAA,GACA,QAAA,EAAA,SA6BA,SAAA,EAAA,EAAA,GACA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,GACA,EAAA,SAAA,GAAA,GACA,IAAA,EAyFA,SAAA,GACA,IAAA,EAAA,IAAA,SAAA,GAEA,GAAA,QAAA,IAAA,sBAAA,EAAA,YACA,GAAA,KAAA,EAAA,SAAA,IAAA,KAAA,EAAA,SAAA,GAEA,OADA,GAAA,QAAA,IAAA,qBACA,EAGA,IAAA,EAAA,EACA,EAAA,EAAA,WAGA,EAAA,SAAA,EAAA,GACA,OACA,KAAA,EAAA,SAAA,IACA,KAAA,EAAA,SAAA,EAAA,IACA,KAAA,EAAA,SAAA,EAAA,IACA,KAAA,EAAA,SAAA,EAAA,IACA,IAAA,EAAA,SAAA,EAAA,IACA,IAAA,EAAA,SAAA,EAAA,IAIA,KAAA,EAAA,GAAA,CAEA,GAAA,EAAA,EAAA,GAAA,CAGA,IAAA,EAAA,EAAA,SAAA,EAAA,GACA,EAAA,GAAA,IAAA,GAAA,GAEA,IAAA,IAEA,EAAA,GAGA,IAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,UAAA,EAAA,EAAA,GAEA,OAAA,EAAA,EAAA,EAAA,GAQA,KAzIA,CAAA,GAEA,GADA,EAAA,SAAA,GAAA,GACA,EAAA,aAAA,CACA,IAAA,EAmdA,SAAA,GAEA,KAAA,cAAA,MAEA,OAEA,IAAA,EAAA,IAAA,SAAA,GAEA,GAAA,QAAA,IAAA,sBAAA,EAAA,YACA,GAAA,KAAA,EAAA,SAAA,IAAA,KAAA,EAAA,SAAA,GAEA,OADA,GAAA,QAAA,IAAA,qBACA,EAGA,IAAA,EAAA,EACA,EAAA,EAAA,WACA,EAAA,IAAA,UAEA,KAAA,EAAA,EAAA,GAAA,CACA,GAAA,QAAA,EAAA,EAAA,EAAA,GAAA,CACA,IAAA,EAAA,EAAA,EACA,EAAA,EAAA,UAAA,EAAA,GAAA,EACA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,QAAA,YAAA,EAGA,GAFA,EAAA,EAAA,UAAA,EAAA,QAAA,cAAA,IAEA,QAAA,aAAA,GAGA,EAAA,EAAA,MAAA,EAAA,GACA,6nBAWA,EAAA,MAAA,GAEA,IAAA,EAAA,EAAA,gBAAA,EAAA,YACA,OAAA,EAAA,GAEA,KAjgBA,CAAA,GACA,EAAA,QAAA,GAAA,GAEA,GACA,EAAA,KAAA,GAIA,GAAA,EAAA,IACA,GAAA,WAAA,KAAA,EAAA,KAEA,EA3CA,SAAA,EAAA,GACA,EAAA,GAAA,EAAA,MAAA,8BAAA,IAAA,GACA,EAAA,EAAA,QAAA,8BAAA,IAKA,IAJA,IAAA,EAAA,KAAA,GACA,EAAA,EAAA,OACA,EAAA,IAAA,YAAA,GACA,EAAA,IAAA,WAAA,GACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,EAAA,WAAA,GAEA,OAAA,EAgCA,CAAA,EAAA,WAGA,GAAA,WAAA,KAAA,EAAA,KAAA,EACA,EAAA,IAAA,YACA,OAAA,SAAA,GACA,EAAA,EAAA,OAAA,SAnCA,SAAA,EAAA,GACA,IAAA,EAAA,IAAA,eACA,EAAA,KAAA,MAAA,GAAA,GACA,EAAA,aAAA,OACA,EAAA,OAAA,SAAA,GACA,KAAA,KAAA,QAAA,IAAA,KAAA,QACA,EAAA,KAAA,WAGA,EAAA,OA4BA,CAAA,EAAA,IAAA,SAAA,GACA,EAAA,kBAAA,SAEA,CACA,IAAA,EAAA,IAAA,eACA,EAAA,OAAA,WACA,GAAA,KAAA,KAAA,QAAA,IAAA,KAAA,OAGA,KAAA,uBAFA,EAAA,EAAA,UAIA,EAAA,MAEA,EAAA,KAAA,MAAA,EAAA,KAAA,GACA,EAAA,aAAA,cACA,EAAA,KAAA,WAEA,GAAA,KAAA,aAAA,aAAA,KAAA,MAAA,aAAA,KAAA,MAAA,CACA,IAAA,GAAA,EAAA,IAAA,YACA,OAAA,SAAA,GACA,GAAA,QAAA,IAAA,sBAAA,EAAA,OAAA,OAAA,YACA,EAAA,EAAA,OAAA,SAGA,EAAA,kBAAA,IAIA,SAAA,EAAA,GACA,IAAA,EAAA,IAAA,SAAA,GAGA,GADA,GAAA,QAAA,IAAA,sBAAA,EAAA,YACA,KAAA,EAAA,SAAA,IAAA,KAAA,EAAA,SAAA,GAEA,OADA,GAAA,QAAA,IAAA,qBACA,EAOA,IAJA,IAEA,EAFA,EAAA,EACA,EAAA,EAAA,WAGA,EAAA,GAAA,CACA,GAAA,KAAA,EAAA,SAAA,GAEA,OADA,GAAA,QAAA,IAAA,gCAAA,EAAA,YAAA,EAAA,SAAA,KACA,EASA,GANA,EAAA,EAAA,SAAA,EAAA,GACA,GAAA,QAAA,IAAA,GAKA,KAAA,EAGA,OAFA,GAAA,QAAA,IAAA,uBAEA,EAAA,EAAA,EAAA,EAAA,EAAA,UAAA,EAAA,IAKA,GAAA,EAAA,EAAA,UAAA,EAAA,IA4DA,IAAA,EAAA,CACA,IAAA,UACA,IAAA,SACA,GAAA,WACA,GAAA,cACA,GAAA,SACA,GAAA,cACA,IAAA,gBACA,IAAA,WACA,IAAA,YACA,GAAA,YAEA,SAAA,EAAA,EAAA,EAAA,GAKA,IAJA,IAEA,EAAA,EAAA,EAAA,EAFA,EAAA,IAAA,SAAA,GACA,EAAA,GAEA,EAAA,EACA,EAAA,EAAA,GACA,KAAA,EAAA,SAAA,IAAA,IAAA,EAAA,SAAA,EAAA,KACA,EAAA,EAAA,SAAA,EAAA,MACA,KACA,EAAA,EAAA,SAAA,EAAA,IACA,EACA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,EAAA,eAAA,GAEA,EAAA,aAAA,MACA,EAAA,GAAA,KAAA,GAGA,EAAA,GAAA,CAAA,EAAA,GAAA,GAIA,EAAA,GAAA,GAKA,IAEA,OAAA,EAKA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAEA,EAAA,EACA,EAHA,EAAA,EAAA,UAAA,GAAA,GACA,EAAA,GAIA,IAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,GAAA,EAAA,IACA,EAAA,EAAA,EAAA,UAAA,GAAA,MACA,GAAA,QAAA,IAAA,gBAAA,EAAA,UAAA,GAAA,IACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,OAAA,EAIA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAGA,EACA,EAAA,EAAA,EACA,EAAA,EALA,EAAA,EAAA,UAAA,EAAA,GAAA,GACA,EAAA,EAAA,UAAA,EAAA,GAAA,GACA,EAAA,EAAA,UAAA,EAAA,GAAA,GAAA,EAKA,OAAA,GACA,KAAA,EACA,KAAA,EACA,GAAA,GAAA,EACA,OAAA,EAAA,SAAA,EAAA,GAAA,GAIA,IAFA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,EAAA,SAAA,EAAA,GAEA,OAAA,EAGA,KAAA,EAEA,OAAA,EAAA,EADA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAEA,KAAA,EACA,GAAA,GAAA,EACA,OAAA,EAAA,UAAA,EAAA,GAAA,GAIA,IAFA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,EAAA,UAAA,EAAA,EAAA,GAAA,GAEA,OAAA,EAGA,KAAA,EACA,GAAA,GAAA,EACA,OAAA,EAAA,UAAA,EAAA,GAAA,GAGA,IADA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,EAAA,UAAA,EAAA,EAAA,GAAA,GAEA,OAAA,EAGA,KAAA,EACA,GAAA,GAAA,EAMA,OALA,EAAA,EAAA,UAAA,GAAA,GACA,EAAA,EAAA,UAAA,EAAA,GAAA,IACA,EAAA,IAAA,OAAA,EAAA,IACA,UAAA,EACA,EAAA,YAAA,EACA,EAGA,IADA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,UAAA,EAAA,EAAA,GAAA,GACA,EAAA,EAAA,UAAA,EAAA,EAAA,EAAA,GAAA,GACA,EAAA,GAAA,IAAA,OAAA,EAAA,GACA,EAAA,GAAA,UAAA,EACA,EAAA,GAAA,YAAA,EAEA,OAAA,EAGA,KAAA,EACA,GAAA,GAAA,EACA,OAAA,EAAA,SAAA,EAAA,GAAA,GAGA,IADA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,GAAA,GAEA,OAAA,EAGA,KAAA,GACA,GAAA,GAAA,EACA,OAAA,EAAA,SAAA,GAAA,GAAA,EAAA,SAAA,EAAA,GAAA,GAGA,IADA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,GAEA,OAAA,GAyEA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACA,GAAA,OAAA,aAAA,EAAA,SAAA,IAEA,OAAA,EAGA,SAAA,EAAA,EAAA,GACA,GAAA,QAAA,EAAA,EAAA,EAAA,GAEA,OADA,GAAA,QAAA,IAAA,wBAAA,EAAA,EAAA,EAAA,KACA,EAGA,IAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EAAA,EAGA,GAAA,OAAA,EAAA,UAAA,GACA,GAAA,MACA,CAAA,GAAA,OAAA,EAAA,UAAA,GAIA,OADA,GAAA,QAAA,IAAA,+CACA,EAHA,GAAA,EAMA,GAAA,IAAA,EAAA,UAAA,EAAA,GAAA,GAEA,OADA,GAAA,QAAA,IAAA,qCACA,EAGA,IAAA,EAAA,EAAA,UAAA,EAAA,GAAA,GAEA,GAAA,EAAA,EAEA,OADA,GAAA,QAAA,IAAA,kDAAA,EAAA,UAAA,EAAA,GAAA,KACA,EAKA,IAFA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,eAEA,IAAA,KADA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,eAAA,EAAA,GACA,CACA,OAAA,GACA,IAAA,cACA,IAAA,QACA,IAAA,eACA,IAAA,kBACA,IAAA,gBACA,IAAA,mBACA,IAAA,YACA,IAAA,iBACA,IAAA,eACA,IAAA,cACA,IAAA,WACA,IAAA,aACA,IAAA,YACA,IAAA,uBACA,IAAA,aACA,EAAA,GAAA,EAAA,GAAA,EAAA,IACA,MAEA,IAAA,cACA,IAAA,kBACA,EAAA,GAAA,OAAA,aAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IACA,MAEA,IAAA,0BACA,EAAA,GACA,EAAA,WAAA,EAAA,GAAA,IACA,EAAA,WAAA,EAAA,GAAA,IACA,EAAA,WAAA,EAAA,GAAA,IACA,EAAA,WAAA,EAAA,GAAA,IAGA,EAAA,GAAA,EAAA,GAIA,GAAA,EAAA,kBAEA,IAAA,KADA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,kBAAA,EAAA,GACA,CACA,OAAA,GACA,IAAA,eACA,EAAA,GAAA,EAAA,GAAA,GACA,IAAA,EAAA,GAAA,GACA,IAAA,EAAA,GAAA,GACA,IAAA,EAAA,GAAA,GAGA,EAAA,GAAA,EAAA,GAOA,OAFA,EAAA,UAvJA,SAAA,EAAA,EAAA,EAAA,GAEA,IAAA,EAbA,SAAA,EAAA,EAAA,GAEA,IAAA,EAAA,EAAA,UAAA,GAAA,GAMA,OAAA,EAAA,UAAA,EAAA,EAAA,GAAA,GAAA,GAKA,CAAA,EAAA,EAAA,EAAA,GAEA,IAAA,EAEA,MAAA,GAEA,GAAA,EAAA,EAAA,WAEA,MAAA,GAIA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAUA,GAAA,EAAA,YAGA,OAAA,EAAA,aACA,KAAA,EAEA,GAAA,EAAA,cAAA,EAAA,gBAAA,CAEA,IAAA,EAAA,EAAA,EAAA,aACA,EAAA,EAAA,gBACA,EAAA,KAAA,IAAA,KAAA,CAAA,IAAA,WAAA,EAAA,OAAA,EAAA,IAAA,CACA,KAAA,eAGA,MAEA,KAAA,EACA,QAAA,IAAA,6DACA,MACA,QACA,QAAA,IAAA,sCAAA,EAAA,kBAGA,GAAA,EAAA,2BACA,QAAA,IAAA,4DAEA,OAAA,EAqGA,CAAA,EAAA,EAAA,EAAA,GAEA,EAsDA,SAAA,EAAA,GACA,IAAA,EAAA,GAEA,GAAA,GAAA,EAAA,UACA,GAAA,EAAA,WAAA,OAAA,EAAA,CACA,EAAA,eAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,WAAA,OAAA,IAAA,CACA,IAAA,EAAA,EAAA,WAAA,KAAA,GACA,EAAA,eAAA,EAAA,UAAA,EAAA,iBAGA,GAAA,GAAA,EAAA,SACA,OAAA,EAAA,UAIA,GAAA,EAAA,gBACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,WAAA,OAAA,IAAA,CACA,IAAA,EAAA,EAAA,WAAA,KAAA,GACA,EAAA,EAAA,SACA,GAAA,MAAA,EAAA,GACA,EAAA,GAAA,EAAA,OACA,CACA,GAAA,MAAA,EAAA,GAAA,KAAA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,GAAA,GACA,EAAA,GAAA,KAAA,GAEA,EAAA,GAAA,KAAA,EAAA,KAKA,OAAA,EAGA,SAAA,EAAA,GACA,IACA,IAAA,EAAA,GACA,GAAA,EAAA,SAAA,OAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,OAAA,IAAA,CACA,IAAA,EAAA,EAAA,SAAA,KAAA,GACA,EAAA,EAAA,WACA,IAAA,IAAA,KAAA,EAAA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,EAAA,SACA,EAAA,EAAA,eAEA,IAAA,IACA,EAAA,GAAA,GAGA,IAAA,EAAA,EAAA,SAEA,QAAA,IAAA,EAAA,GACA,EAAA,GAAA,EAAA,OACA,CACA,QAAA,IAAA,EAAA,GAAA,KAAA,CACA,IAAA,EAAA,EAAA,GAEA,EAAA,GAAA,GACA,EAAA,GAAA,KAAA,GAEA,EAAA,GAAA,KAAA,EAAA,UAIA,EAAA,EAAA,YAEA,OAAA,EACA,MAAA,GACA,QAAA,IAAA,EAAA,UAIA,EAAA,UAAA,WACA,EAAA,cAAA,GAGA,EAAA,WAAA,WACA,EAAA,cAAA,GAGA,EAAA,QAAA,SAAA,EAAA,GACA,SAAA,KAAA,OAAA,aAAA,KAAA,OACA,KAAA,kBAAA,aAAA,KAAA,oBACA,EAAA,YAGA,EAAA,GAGA,GACA,EAAA,KAAA,GAHA,EAAA,EAAA,IAMA,IAGA,EAAA,OAAA,SAAA,EAAA,GACA,GAAA,EAAA,GACA,OAAA,EAAA,SAAA,IAGA,EAAA,WAAA,SAAA,EAAA,GACA,GAAA,EAAA,GACA,OAAA,EAAA,SAAA,IAGA,EAAA,WAAA,SAAA,GACA,IAAA,EAAA,GAAA,MAAA,GACA,IAAA,EACA,EAAA,EAAA,SACA,EAAA,GACA,IAAA,KAAA,EACA,EAAA,eAAA,KACA,EAAA,GAAA,EAAA,IAGA,OAAA,GAGA,EAAA,eAAA,SAAA,GACA,IAAA,EAAA,GAAA,MAAA,GACA,IAAA,EACA,EAAA,EAAA,SACA,EAAA,GACA,IAAA,KAAA,EACA,EAAA,eAAA,KACA,EAAA,GAAA,EAAA,IAGA,OAAA,GAGA,EAAA,OAAA,SAAA,GACA,IAAA,EAAA,GAAA,MAAA,GACA,IAAA,EACA,EAAA,EAAA,SACA,EAAA,GACA,IAAA,KAAA,EACA,EAAA,eAAA,KACA,iBAAA,EAAA,GACA,EAAA,aAAA,OACA,GAAA,EAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,UAAA,IAAA,EAAA,GAAA,YAAA,QAEA,GAAA,EAAA,OAAA,EAAA,GAAA,OAAA,eAGA,GAAA,EAAA,MAAA,EAAA,GAAA,QAIA,OAAA,GAGA,EAAA,mBAAA,SAAA,GACA,OAAA,EAAA,IAGA,mBAAA,GAAA,EAAA,KACA,EAAA,UAAA,GAAA,WACA,OAAA,MAGA,KAAA;;ACp5BO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,QAAA,mBAAA,EA7IP,IAAIA,EAAOC,QAAQ,WACbC,EAAe,SAASC,GACnB,OAAA,IAAIC,QAAQ,SAACC,EAASC,GACrBC,IAAAA,EAAM,IAAIC,eACdD,EAAIE,KAAK,MAAON,GAAK,GACrBI,EAAIG,aAAe,OACnBH,EAAII,OAAS,WACL,GAAgB,MAAhB,KAAKC,OAAgB,CACjBC,IAAAA,EAAO,KAAKC,SACZC,EAAa,IAAIC,WACrBD,EAAWE,UAAY,SAASC,GACxBC,IAAAA,EAASD,EAAEE,OAAOD,OACtBd,EAAQc,IAEZJ,EAAWM,cAAcR,KAGjCN,EAAIe,QAAU,SAASC,GACnBjB,EAAOiB,IAEXhB,EAAIiB,UAINC,EAAS,SAASC,GACb,OAAA,IAAItB,QAAQ,SAAAC,GACfL,EAAK2B,QAAQD,EAAM,WACXE,IAAAA,EAAc5B,EAAK6B,OAAO,KAAM,eACpCxB,EAAQuB,QAKdE,EAAc,SAASC,EAAKH,GACxBI,IAAAA,EAASC,SAASC,cAAc,UAClCC,EAAMH,EAAOI,WAAW,MACxBC,EAAcN,EAAIM,aAAeN,EAAIO,MACrCC,EAAeR,EAAIQ,cAAgBR,EAAIS,OAcpC,OAZa,IAAhBZ,GACAI,EAAOM,MAAQC,EACfP,EAAOQ,OAASH,EAChBF,EAAIM,UAAUT,EAAOM,MAAQ,EAAGN,EAAOQ,OAAS,GAChDL,EAAIO,OAAOC,KAAKC,GAAK,IAAM,IAC3BT,EAAIU,UAAUd,GAAMM,EAAc,GAAIE,EAAe,EAAGP,EAAOQ,OAAQR,EAAOM,SAE9EN,EAAOM,MAAQD,EACfL,EAAOQ,OAASD,EAChBJ,EAAIU,UAAUd,EAAK,EAAG,EAAGC,EAAOM,MAAON,EAAOQ,SAG3C,IAAIpC,QAAQ,SAAAC,GACfA,EAAQ2B,MAIHc,EAAgB,SAASC,GAC5BC,IAAAA,EAAS,SAASjB,GACfA,EAAIkB,QAAQC,UACbzB,EAAOM,GAAKoB,KAAK,SAAAvB,GACM,GAAfA,GACAE,EAAYC,EAAKH,GAAauB,KAAK,SAAAnB,GAC5B,IACCD,EAAIqB,IAAMpB,EAAOqB,YACjBtB,EAAIkB,QAAQC,UAAW,EAC1B,MAAMhC,GACHhB,EAAa6B,EAAIqB,KAAKD,KAAK,SAAAG,GACvBvB,EAAIpB,OAAS,WACJoB,EAAIkB,QAAQC,UACbpB,EAAYC,EAAKH,GAAauB,KAAK,SAAAnB,GAC/BD,EAAIqB,IAAMpB,EAAOqB,YACjBtB,EAAIkB,QAAQC,UAAW,KAInCnB,EAAIqB,IAAME,UAQlCC,EAAOtB,SAASuB,iBAAiBT,GACjCQ,GAAAA,EAAKE,OACA,IAAIC,IAAAA,EAAAA,SAAAA,GACD3B,IAAAA,EAAMwB,EAAKG,GACmB,QAA9B3B,EAAI4B,QAAQC,gBACZ7B,EAAI8B,YAAc,YACd9B,EAAI+B,SACJd,EAAOjB,GAEPA,EAAIpB,OAAS,WACTqC,EAAOjB,MARd2B,EAAI,EAAGA,EAAIH,EAAKE,OAAQC,IAAxBA,EAAAA,QAeTK,QAAQC,IAAI,uBAAyBjB,IAyCtC,QAAA,cAAA,EArCP,IAAMkB,EAAc,SAASC,EAAaC,EAAcC,EAAUC,GAC1DhC,IAAAA,EAAc6B,EACd3B,EAAe4B,EACbG,EAAW,WACTjC,EAAc+B,EACd7B,EAAeI,KAAK4B,MAAMH,GAAYD,EAAeD,KAEzDM,EAAY,WACRjC,EAAe8B,EACfhC,EAAcM,KAAK4B,MAAMF,GAAaH,EAAcC,KAsBrD,OAnBHC,GAAYC,GAERH,EAAcE,GAAYD,EAAeE,KACrCH,EAAcC,EAAeC,EAAWC,EAExCC,IAGAE,KAGDJ,EAEPE,IACOD,GAEPG,IAGG,CACHlC,MAAOD,EACPG,OAAQD,IAIHkC,EAAa,SAAS/C,EAAMgD,GAC/BC,IAAAA,EAAMC,OAAOC,OAAO,CACtBC,MAAO,GACRJ,GAAU,IAEN,OAAA,IAAItE,QAAQ,SAACC,EAASC,GACU,IAA/BoB,EAAKqD,KAAKC,QAAQ,SAClBvD,EAAOC,GAAMyB,KAAK,SAAAvB,GACVqD,IAAAA,EAAU,IAAIjE,WAClBiE,EAAQtE,OAAS,SAASO,GAClBoC,IAAAA,EAASpC,EAAEE,OAAOD,OAClBY,EAAME,SAASC,cAAc,OAEjCH,EAAIpB,OAAS,WAEDuE,IAAAA,GADJP,EAAIrC,OAASqC,EAAInC,UAEG,IAAhBZ,GACAsD,EAAejB,EAAYlC,EAAIS,OAAQT,EAAIO,MAAOqC,EAAIrC,MAAOqC,EAAInC,QACjET,EAAIM,YAAc6C,EAAa1C,OAC/BT,EAAIQ,aAAe2C,EAAa5C,QAEhC4C,EAAejB,EAAYlC,EAAIO,MAAOP,EAAIS,OAAQmC,EAAIrC,MAAOqC,EAAInC,QACjET,EAAIM,YAAc6C,EAAa5C,MAC/BP,EAAIQ,aAAe2C,EAAa1C,SAIxCV,EAAYC,EAAKH,GAAauB,KAAK,SAAAnB,GAC/B3B,EAAQ2B,EAAOqB,UAAU,aAAcsB,EAAIG,WAGnD/C,EAAIqB,IAAME,GAEd2B,EAAQ5D,cAAcK,KACvByD,MAAM,SAAA5D,GACLjB,EAAOiB,KAGXjB,EAAO,iBAtCZ,QAAA,WAAA","file":"fixer.js","sourceRoot":"..\\src\\lib","sourcesContent":["(function() {\n\n    var debug = false;\n\n    var root = this;\n\n    var EXIF = function(obj) {\n        if (obj instanceof EXIF) return obj;\n        if (!(this instanceof EXIF)) return new EXIF(obj);\n        this.EXIFwrapped = obj;\n    };\n\n    if (typeof exports !== 'undefined') {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = EXIF;\n        }\n        exports.EXIF = EXIF;\n    } else {\n        root.EXIF = EXIF;\n    }\n\n    var ExifTags = EXIF.Tags = {\n\n        // version tags\n        0x9000 : \"ExifVersion\",             // EXIF version\n        0xA000 : \"FlashpixVersion\",         // Flashpix format version\n\n        // colorspace tags\n        0xA001 : \"ColorSpace\",              // Color space information tag\n\n        // image configuration\n        0xA002 : \"PixelXDimension\",         // Valid width of meaningful image\n        0xA003 : \"PixelYDimension\",         // Valid height of meaningful image\n        0x9101 : \"ComponentsConfiguration\", // Information about channels\n        0x9102 : \"CompressedBitsPerPixel\",  // Compressed bits per pixel\n\n        // user information\n        0x927C : \"MakerNote\",               // Any desired information written by the manufacturer\n        0x9286 : \"UserComment\",             // Comments by user\n\n        // related file\n        0xA004 : \"RelatedSoundFile\",        // Name of related sound file\n\n        // date and time\n        0x9003 : \"DateTimeOriginal\",        // Date and time when the original image was generated\n        0x9004 : \"DateTimeDigitized\",       // Date and time when the image was stored digitally\n        0x9290 : \"SubsecTime\",              // Fractions of seconds for DateTime\n        0x9291 : \"SubsecTimeOriginal\",      // Fractions of seconds for DateTimeOriginal\n        0x9292 : \"SubsecTimeDigitized\",     // Fractions of seconds for DateTimeDigitized\n\n        // picture-taking conditions\n        0x829A : \"ExposureTime\",            // Exposure time (in seconds)\n        0x829D : \"FNumber\",                 // F number\n        0x8822 : \"ExposureProgram\",         // Exposure program\n        0x8824 : \"SpectralSensitivity\",     // Spectral sensitivity\n        0x8827 : \"ISOSpeedRatings\",         // ISO speed rating\n        0x8828 : \"OECF\",                    // Optoelectric conversion factor\n        0x9201 : \"ShutterSpeedValue\",       // Shutter speed\n        0x9202 : \"ApertureValue\",           // Lens aperture\n        0x9203 : \"BrightnessValue\",         // Value of brightness\n        0x9204 : \"ExposureBias\",            // Exposure bias\n        0x9205 : \"MaxApertureValue\",        // Smallest F number of lens\n        0x9206 : \"SubjectDistance\",         // Distance to subject in meters\n        0x9207 : \"MeteringMode\",            // Metering mode\n        0x9208 : \"LightSource\",             // Kind of light source\n        0x9209 : \"Flash\",                   // Flash status\n        0x9214 : \"SubjectArea\",             // Location and area of main subject\n        0x920A : \"FocalLength\",             // Focal length of the lens in mm\n        0xA20B : \"FlashEnergy\",             // Strobe energy in BCPS\n        0xA20C : \"SpatialFrequencyResponse\",    //\n        0xA20E : \"FocalPlaneXResolution\",   // Number of pixels in width direction per FocalPlaneResolutionUnit\n        0xA20F : \"FocalPlaneYResolution\",   // Number of pixels in height direction per FocalPlaneResolutionUnit\n        0xA210 : \"FocalPlaneResolutionUnit\",    // Unit for measuring FocalPlaneXResolution and FocalPlaneYResolution\n        0xA214 : \"SubjectLocation\",         // Location of subject in image\n        0xA215 : \"ExposureIndex\",           // Exposure index selected on camera\n        0xA217 : \"SensingMethod\",           // Image sensor type\n        0xA300 : \"FileSource\",              // Image source (3 == DSC)\n        0xA301 : \"SceneType\",               // Scene type (1 == directly photographed)\n        0xA302 : \"CFAPattern\",              // Color filter array geometric pattern\n        0xA401 : \"CustomRendered\",          // Special processing\n        0xA402 : \"ExposureMode\",            // Exposure mode\n        0xA403 : \"WhiteBalance\",            // 1 = auto white balance, 2 = manual\n        0xA404 : \"DigitalZoomRation\",       // Digital zoom ratio\n        0xA405 : \"FocalLengthIn35mmFilm\",   // Equivalent foacl length assuming 35mm film camera (in mm)\n        0xA406 : \"SceneCaptureType\",        // Type of scene\n        0xA407 : \"GainControl\",             // Degree of overall image gain adjustment\n        0xA408 : \"Contrast\",                // Direction of contrast processing applied by camera\n        0xA409 : \"Saturation\",              // Direction of saturation processing applied by camera\n        0xA40A : \"Sharpness\",               // Direction of sharpness processing applied by camera\n        0xA40B : \"DeviceSettingDescription\",    //\n        0xA40C : \"SubjectDistanceRange\",    // Distance to subject\n\n        // other tags\n        0xA005 : \"InteroperabilityIFDPointer\",\n        0xA420 : \"ImageUniqueID\"            // Identifier assigned uniquely to each image\n    };\n\n    var TiffTags = EXIF.TiffTags = {\n        0x0100 : \"ImageWidth\",\n        0x0101 : \"ImageHeight\",\n        0x8769 : \"ExifIFDPointer\",\n        0x8825 : \"GPSInfoIFDPointer\",\n        0xA005 : \"InteroperabilityIFDPointer\",\n        0x0102 : \"BitsPerSample\",\n        0x0103 : \"Compression\",\n        0x0106 : \"PhotometricInterpretation\",\n        0x0112 : \"Orientation\",\n        0x0115 : \"SamplesPerPixel\",\n        0x011C : \"PlanarConfiguration\",\n        0x0212 : \"YCbCrSubSampling\",\n        0x0213 : \"YCbCrPositioning\",\n        0x011A : \"XResolution\",\n        0x011B : \"YResolution\",\n        0x0128 : \"ResolutionUnit\",\n        0x0111 : \"StripOffsets\",\n        0x0116 : \"RowsPerStrip\",\n        0x0117 : \"StripByteCounts\",\n        0x0201 : \"JPEGInterchangeFormat\",\n        0x0202 : \"JPEGInterchangeFormatLength\",\n        0x012D : \"TransferFunction\",\n        0x013E : \"WhitePoint\",\n        0x013F : \"PrimaryChromaticities\",\n        0x0211 : \"YCbCrCoefficients\",\n        0x0214 : \"ReferenceBlackWhite\",\n        0x0132 : \"DateTime\",\n        0x010E : \"ImageDescription\",\n        0x010F : \"Make\",\n        0x0110 : \"Model\",\n        0x0131 : \"Software\",\n        0x013B : \"Artist\",\n        0x8298 : \"Copyright\"\n    };\n\n    var GPSTags = EXIF.GPSTags = {\n        0x0000 : \"GPSVersionID\",\n        0x0001 : \"GPSLatitudeRef\",\n        0x0002 : \"GPSLatitude\",\n        0x0003 : \"GPSLongitudeRef\",\n        0x0004 : \"GPSLongitude\",\n        0x0005 : \"GPSAltitudeRef\",\n        0x0006 : \"GPSAltitude\",\n        0x0007 : \"GPSTimeStamp\",\n        0x0008 : \"GPSSatellites\",\n        0x0009 : \"GPSStatus\",\n        0x000A : \"GPSMeasureMode\",\n        0x000B : \"GPSDOP\",\n        0x000C : \"GPSSpeedRef\",\n        0x000D : \"GPSSpeed\",\n        0x000E : \"GPSTrackRef\",\n        0x000F : \"GPSTrack\",\n        0x0010 : \"GPSImgDirectionRef\",\n        0x0011 : \"GPSImgDirection\",\n        0x0012 : \"GPSMapDatum\",\n        0x0013 : \"GPSDestLatitudeRef\",\n        0x0014 : \"GPSDestLatitude\",\n        0x0015 : \"GPSDestLongitudeRef\",\n        0x0016 : \"GPSDestLongitude\",\n        0x0017 : \"GPSDestBearingRef\",\n        0x0018 : \"GPSDestBearing\",\n        0x0019 : \"GPSDestDistanceRef\",\n        0x001A : \"GPSDestDistance\",\n        0x001B : \"GPSProcessingMethod\",\n        0x001C : \"GPSAreaInformation\",\n        0x001D : \"GPSDateStamp\",\n        0x001E : \"GPSDifferential\"\n    };\n\n     // EXIF 2.3 Spec\n    var IFD1Tags = EXIF.IFD1Tags = {\n        0x0100: \"ImageWidth\",\n        0x0101: \"ImageHeight\",\n        0x0102: \"BitsPerSample\",\n        0x0103: \"Compression\",\n        0x0106: \"PhotometricInterpretation\",\n        0x0111: \"StripOffsets\",\n        0x0112: \"Orientation\",\n        0x0115: \"SamplesPerPixel\",\n        0x0116: \"RowsPerStrip\",\n        0x0117: \"StripByteCounts\",\n        0x011A: \"XResolution\",\n        0x011B: \"YResolution\",\n        0x011C: \"PlanarConfiguration\",\n        0x0128: \"ResolutionUnit\",\n        0x0201: \"JpegIFOffset\",    // When image format is JPEG, this value show offset to JPEG data stored.(aka \"ThumbnailOffset\" or \"JPEGInterchangeFormat\")\n        0x0202: \"JpegIFByteCount\", // When image format is JPEG, this value shows data size of JPEG image (aka \"ThumbnailLength\" or \"JPEGInterchangeFormatLength\")\n        0x0211: \"YCbCrCoefficients\",\n        0x0212: \"YCbCrSubSampling\",\n        0x0213: \"YCbCrPositioning\",\n        0x0214: \"ReferenceBlackWhite\"\n    };\n\n    var StringValues = EXIF.StringValues = {\n        ExposureProgram : {\n            0 : \"Not defined\",\n            1 : \"Manual\",\n            2 : \"Normal program\",\n            3 : \"Aperture priority\",\n            4 : \"Shutter priority\",\n            5 : \"Creative program\",\n            6 : \"Action program\",\n            7 : \"Portrait mode\",\n            8 : \"Landscape mode\"\n        },\n        MeteringMode : {\n            0 : \"Unknown\",\n            1 : \"Average\",\n            2 : \"CenterWeightedAverage\",\n            3 : \"Spot\",\n            4 : \"MultiSpot\",\n            5 : \"Pattern\",\n            6 : \"Partial\",\n            255 : \"Other\"\n        },\n        LightSource : {\n            0 : \"Unknown\",\n            1 : \"Daylight\",\n            2 : \"Fluorescent\",\n            3 : \"Tungsten (incandescent light)\",\n            4 : \"Flash\",\n            9 : \"Fine weather\",\n            10 : \"Cloudy weather\",\n            11 : \"Shade\",\n            12 : \"Daylight fluorescent (D 5700 - 7100K)\",\n            13 : \"Day white fluorescent (N 4600 - 5400K)\",\n            14 : \"Cool white fluorescent (W 3900 - 4500K)\",\n            15 : \"White fluorescent (WW 3200 - 3700K)\",\n            17 : \"Standard light A\",\n            18 : \"Standard light B\",\n            19 : \"Standard light C\",\n            20 : \"D55\",\n            21 : \"D65\",\n            22 : \"D75\",\n            23 : \"D50\",\n            24 : \"ISO studio tungsten\",\n            255 : \"Other\"\n        },\n        Flash : {\n            0x0000 : \"Flash did not fire\",\n            0x0001 : \"Flash fired\",\n            0x0005 : \"Strobe return light not detected\",\n            0x0007 : \"Strobe return light detected\",\n            0x0009 : \"Flash fired, compulsory flash mode\",\n            0x000D : \"Flash fired, compulsory flash mode, return light not detected\",\n            0x000F : \"Flash fired, compulsory flash mode, return light detected\",\n            0x0010 : \"Flash did not fire, compulsory flash mode\",\n            0x0018 : \"Flash did not fire, auto mode\",\n            0x0019 : \"Flash fired, auto mode\",\n            0x001D : \"Flash fired, auto mode, return light not detected\",\n            0x001F : \"Flash fired, auto mode, return light detected\",\n            0x0020 : \"No flash function\",\n            0x0041 : \"Flash fired, red-eye reduction mode\",\n            0x0045 : \"Flash fired, red-eye reduction mode, return light not detected\",\n            0x0047 : \"Flash fired, red-eye reduction mode, return light detected\",\n            0x0049 : \"Flash fired, compulsory flash mode, red-eye reduction mode\",\n            0x004D : \"Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected\",\n            0x004F : \"Flash fired, compulsory flash mode, red-eye reduction mode, return light detected\",\n            0x0059 : \"Flash fired, auto mode, red-eye reduction mode\",\n            0x005D : \"Flash fired, auto mode, return light not detected, red-eye reduction mode\",\n            0x005F : \"Flash fired, auto mode, return light detected, red-eye reduction mode\"\n        },\n        SensingMethod : {\n            1 : \"Not defined\",\n            2 : \"One-chip color area sensor\",\n            3 : \"Two-chip color area sensor\",\n            4 : \"Three-chip color area sensor\",\n            5 : \"Color sequential area sensor\",\n            7 : \"Trilinear sensor\",\n            8 : \"Color sequential linear sensor\"\n        },\n        SceneCaptureType : {\n            0 : \"Standard\",\n            1 : \"Landscape\",\n            2 : \"Portrait\",\n            3 : \"Night scene\"\n        },\n        SceneType : {\n            1 : \"Directly photographed\"\n        },\n        CustomRendered : {\n            0 : \"Normal process\",\n            1 : \"Custom process\"\n        },\n        WhiteBalance : {\n            0 : \"Auto white balance\",\n            1 : \"Manual white balance\"\n        },\n        GainControl : {\n            0 : \"None\",\n            1 : \"Low gain up\",\n            2 : \"High gain up\",\n            3 : \"Low gain down\",\n            4 : \"High gain down\"\n        },\n        Contrast : {\n            0 : \"Normal\",\n            1 : \"Soft\",\n            2 : \"Hard\"\n        },\n        Saturation : {\n            0 : \"Normal\",\n            1 : \"Low saturation\",\n            2 : \"High saturation\"\n        },\n        Sharpness : {\n            0 : \"Normal\",\n            1 : \"Soft\",\n            2 : \"Hard\"\n        },\n        SubjectDistanceRange : {\n            0 : \"Unknown\",\n            1 : \"Macro\",\n            2 : \"Close view\",\n            3 : \"Distant view\"\n        },\n        FileSource : {\n            3 : \"DSC\"\n        },\n\n        Components : {\n            0 : \"\",\n            1 : \"Y\",\n            2 : \"Cb\",\n            3 : \"Cr\",\n            4 : \"R\",\n            5 : \"G\",\n            6 : \"B\"\n        }\n    };\n\n    function addEvent(element, event, handler) {\n        if (element.addEventListener) {\n            element.addEventListener(event, handler, false);\n        } else if (element.attachEvent) {\n            element.attachEvent(\"on\" + event, handler);\n        }\n    }\n\n    function imageHasData(img) {\n        return !!(img.exifdata);\n    }\n\n\n    function base64ToArrayBuffer(base64, contentType) {\n        contentType = contentType || base64.match(/^data\\:([^\\;]+)\\;base64,/mi)[1] || ''; // e.g. 'data:image/jpeg;base64,...' => 'image/jpeg'\n        base64 = base64.replace(/^data\\:([^\\;]+)\\;base64,/gmi, '');\n        var binary = atob(base64);\n        var len = binary.length;\n        var buffer = new ArrayBuffer(len);\n        var view = new Uint8Array(buffer);\n        for (var i = 0; i < len; i++) {\n            view[i] = binary.charCodeAt(i);\n        }\n        return buffer;\n    }\n\n    function objectURLToBlob(url, callback) {\n        var http = new XMLHttpRequest();\n        http.open(\"GET\", url, true);\n        http.responseType = \"blob\";\n        http.onload = function(e) {\n            if (this.status == 200 || this.status === 0) {\n                callback(this.response);\n            }\n        };\n        http.send();\n    }\n\n    function getImageData(img, callback) {\n        function handleBinaryFile(binFile) {\n            var data = findEXIFinJPEG(binFile);\n            img.exifdata = data || {};\n            var iptcdata = findIPTCinJPEG(binFile);\n            img.iptcdata = iptcdata || {};\n            if (EXIF.isXmpEnabled) {\n               var xmpdata= findXMPinJPEG(binFile);\n               img.xmpdata = xmpdata || {};               \n            }\n            if (callback) {\n                callback.call(img);\n            }\n        }\n\n        if (img.src) {\n            if (/^data\\:/i.test(img.src)) { // Data URI\n                var arrayBuffer = base64ToArrayBuffer(img.src);\n                handleBinaryFile(arrayBuffer);\n\n            } else if (/^blob\\:/i.test(img.src)) { // Object URL\n                var fileReader = new FileReader();\n                fileReader.onload = function(e) {\n                    handleBinaryFile(e.target.result);\n                };\n                objectURLToBlob(img.src, function (blob) {\n                    fileReader.readAsArrayBuffer(blob);\n                });\n            } else {\n                var http = new XMLHttpRequest();\n                http.onload = function() {\n                    if (this.status == 200 || this.status === 0) {\n                        handleBinaryFile(http.response);\n                    } else {\n                        throw \"Could not load image\";\n                    }\n                    http = null;\n                };\n                http.open(\"GET\", img.src, true);\n                http.responseType = \"arraybuffer\";\n                http.send(null);\n            }\n        } else if (self.FileReader && (img instanceof self.Blob || img instanceof self.File)) {\n            var fileReader = new FileReader();\n            fileReader.onload = function(e) {\n                if (debug) console.log(\"Got file of length \" + e.target.result.byteLength);\n                handleBinaryFile(e.target.result);\n            };\n\n            fileReader.readAsArrayBuffer(img);\n        }\n    }\n\n    function findEXIFinJPEG(file) {\n        var dataView = new DataView(file);\n\n        if (debug) console.log(\"Got file of length \" + file.byteLength);\n        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\n            if (debug) console.log(\"Not a valid JPEG\");\n            return false; // not a valid jpeg\n        }\n\n        var offset = 2,\n            length = file.byteLength,\n            marker;\n\n        while (offset < length) {\n            if (dataView.getUint8(offset) != 0xFF) {\n                if (debug) console.log(\"Not a valid marker at offset \" + offset + \", found: \" + dataView.getUint8(offset));\n                return false; // not a valid marker, something is wrong\n            }\n\n            marker = dataView.getUint8(offset + 1);\n            if (debug) console.log(marker);\n\n            // we could implement handling for other markers here,\n            // but we're only looking for 0xFFE1 for EXIF data\n\n            if (marker == 225) {\n                if (debug) console.log(\"Found 0xFFE1 marker\");\n\n                return readEXIFData(dataView, offset + 4, dataView.getUint16(offset + 2) - 2);\n\n                // offset += 2 + file.getShortAt(offset+2, true);\n\n            } else {\n                offset += 2 + dataView.getUint16(offset+2);\n            }\n\n        }\n\n    }\n\n    function findIPTCinJPEG(file) {\n        var dataView = new DataView(file);\n\n        if (debug) console.log(\"Got file of length \" + file.byteLength);\n        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\n            if (debug) console.log(\"Not a valid JPEG\");\n            return false; // not a valid jpeg\n        }\n\n        var offset = 2,\n            length = file.byteLength;\n\n\n        var isFieldSegmentStart = function(dataView, offset){\n            return (\n                dataView.getUint8(offset) === 0x38 &&\n                dataView.getUint8(offset+1) === 0x42 &&\n                dataView.getUint8(offset+2) === 0x49 &&\n                dataView.getUint8(offset+3) === 0x4D &&\n                dataView.getUint8(offset+4) === 0x04 &&\n                dataView.getUint8(offset+5) === 0x04\n            );\n        };\n\n        while (offset < length) {\n\n            if ( isFieldSegmentStart(dataView, offset )){\n\n                // Get the length of the name header (which is padded to an even number of bytes)\n                var nameHeaderLength = dataView.getUint8(offset+7);\n                if(nameHeaderLength % 2 !== 0) nameHeaderLength += 1;\n                // Check for pre photoshop 6 format\n                if(nameHeaderLength === 0) {\n                    // Always 4\n                    nameHeaderLength = 4;\n                }\n\n                var startOffset = offset + 8 + nameHeaderLength;\n                var sectionLength = dataView.getUint16(offset + 6 + nameHeaderLength);\n\n                return readIPTCData(file, startOffset, sectionLength);\n\n                break;\n\n            }\n\n\n            // Not the marker, continue searching\n            offset++;\n\n        }\n\n    }\n    var IptcFieldMap = {\n        0x78 : 'caption',\n        0x6E : 'credit',\n        0x19 : 'keywords',\n        0x37 : 'dateCreated',\n        0x50 : 'byline',\n        0x55 : 'bylineTitle',\n        0x7A : 'captionWriter',\n        0x69 : 'headline',\n        0x74 : 'copyright',\n        0x0F : 'category'\n    };\n    function readIPTCData(file, startOffset, sectionLength){\n        var dataView = new DataView(file);\n        var data = {};\n        var fieldValue, fieldName, dataSize, segmentType, segmentSize;\n        var segmentStartPos = startOffset;\n        while(segmentStartPos < startOffset+sectionLength) {\n            if(dataView.getUint8(segmentStartPos) === 0x1C && dataView.getUint8(segmentStartPos+1) === 0x02){\n                segmentType = dataView.getUint8(segmentStartPos+2);\n                if(segmentType in IptcFieldMap) {\n                    dataSize = dataView.getInt16(segmentStartPos+3);\n                    segmentSize = dataSize + 5;\n                    fieldName = IptcFieldMap[segmentType];\n                    fieldValue = getStringFromDB(dataView, segmentStartPos+5, dataSize);\n                    // Check if we already stored a value with this name\n                    if(data.hasOwnProperty(fieldName)) {\n                        // Value already stored with this name, create multivalue field\n                        if(data[fieldName] instanceof Array) {\n                            data[fieldName].push(fieldValue);\n                        }\n                        else {\n                            data[fieldName] = [data[fieldName], fieldValue];\n                        }\n                    }\n                    else {\n                        data[fieldName] = fieldValue;\n                    }\n                }\n\n            }\n            segmentStartPos++;\n        }\n        return data;\n    }\n\n\n\n    function readTags(file, tiffStart, dirStart, strings, bigEnd) {\n        var entries = file.getUint16(dirStart, !bigEnd),\n            tags = {},\n            entryOffset, tag,\n            i;\n\n        for (i=0;i<entries;i++) {\n            entryOffset = dirStart + i*12 + 2;\n            tag = strings[file.getUint16(entryOffset, !bigEnd)];\n            if (!tag && debug) console.log(\"Unknown tag: \" + file.getUint16(entryOffset, !bigEnd));\n            tags[tag] = readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd);\n        }\n        return tags;\n    }\n\n\n    function readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd) {\n        var type = file.getUint16(entryOffset+2, !bigEnd),\n            numValues = file.getUint32(entryOffset+4, !bigEnd),\n            valueOffset = file.getUint32(entryOffset+8, !bigEnd) + tiffStart,\n            offset,\n            vals, val, n,\n            numerator, denominator;\n\n        switch (type) {\n            case 1: // byte, 8-bit unsigned int\n            case 7: // undefined, 8-bit byte, value depending on field\n                if (numValues == 1) {\n                    return file.getUint8(entryOffset + 8, !bigEnd);\n                } else {\n                    offset = numValues > 4 ? valueOffset : (entryOffset + 8);\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getUint8(offset + n);\n                    }\n                    return vals;\n                }\n\n            case 2: // ascii, 8-bit byte\n                offset = numValues > 4 ? valueOffset : (entryOffset + 8);\n                return getStringFromDB(file, offset, numValues-1);\n\n            case 3: // short, 16 bit int\n                if (numValues == 1) {\n                    return file.getUint16(entryOffset + 8, !bigEnd);\n                } else {\n                    offset = numValues > 2 ? valueOffset : (entryOffset + 8);\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getUint16(offset + 2*n, !bigEnd);\n                    }\n                    return vals;\n                }\n\n            case 4: // long, 32 bit int\n                if (numValues == 1) {\n                    return file.getUint32(entryOffset + 8, !bigEnd);\n                } else {\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getUint32(valueOffset + 4*n, !bigEnd);\n                    }\n                    return vals;\n                }\n\n            case 5:    // rational = two long values, first is numerator, second is denominator\n                if (numValues == 1) {\n                    numerator = file.getUint32(valueOffset, !bigEnd);\n                    denominator = file.getUint32(valueOffset+4, !bigEnd);\n                    val = new Number(numerator / denominator);\n                    val.numerator = numerator;\n                    val.denominator = denominator;\n                    return val;\n                } else {\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        numerator = file.getUint32(valueOffset + 8*n, !bigEnd);\n                        denominator = file.getUint32(valueOffset+4 + 8*n, !bigEnd);\n                        vals[n] = new Number(numerator / denominator);\n                        vals[n].numerator = numerator;\n                        vals[n].denominator = denominator;\n                    }\n                    return vals;\n                }\n\n            case 9: // slong, 32 bit signed int\n                if (numValues == 1) {\n                    return file.getInt32(entryOffset + 8, !bigEnd);\n                } else {\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getInt32(valueOffset + 4*n, !bigEnd);\n                    }\n                    return vals;\n                }\n\n            case 10: // signed rational, two slongs, first is numerator, second is denominator\n                if (numValues == 1) {\n                    return file.getInt32(valueOffset, !bigEnd) / file.getInt32(valueOffset+4, !bigEnd);\n                } else {\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getInt32(valueOffset + 8*n, !bigEnd) / file.getInt32(valueOffset+4 + 8*n, !bigEnd);\n                    }\n                    return vals;\n                }\n        }\n    }\n\n    /**\n    * Given an IFD (Image File Directory) start offset\n    * returns an offset to next IFD or 0 if it's the last IFD.\n    */\n    function getNextIFDOffset(dataView, dirStart, bigEnd){\n        //the first 2bytes means the number of directory entries contains in this IFD\n        var entries = dataView.getUint16(dirStart, !bigEnd);\n\n        // After last directory entry, there is a 4bytes of data,\n        // it means an offset to next IFD.\n        // If its value is '0x00000000', it means this is the last IFD and there is no linked IFD.\n\n        return dataView.getUint32(dirStart + 2 + entries * 12, !bigEnd); // each entry is 12 bytes long\n    }\n\n    function readThumbnailImage(dataView, tiffStart, firstIFDOffset, bigEnd){\n        // get the IFD1 offset\n        var IFD1OffsetPointer = getNextIFDOffset(dataView, tiffStart+firstIFDOffset, bigEnd);\n\n        if (!IFD1OffsetPointer) {\n            // console.log('******** IFD1Offset is empty, image thumb not found ********');\n            return {};\n        }\n        else if (IFD1OffsetPointer > dataView.byteLength) { // this should not happen\n            // console.log('******** IFD1Offset is outside the bounds of the DataView ********');\n            return {};\n        }\n        // console.log('*******  thumbnail IFD offset (IFD1) is: %s', IFD1OffsetPointer);\n\n        var thumbTags = readTags(dataView, tiffStart, tiffStart + IFD1OffsetPointer, IFD1Tags, bigEnd)\n\n        // EXIF 2.3 specification for JPEG format thumbnail\n\n        // If the value of Compression(0x0103) Tag in IFD1 is '6', thumbnail image format is JPEG.\n        // Most of Exif image uses JPEG format for thumbnail. In that case, you can get offset of thumbnail\n        // by JpegIFOffset(0x0201) Tag in IFD1, size of thumbnail by JpegIFByteCount(0x0202) Tag.\n        // Data format is ordinary JPEG format, starts from 0xFFD8 and ends by 0xFFD9. It seems that\n        // JPEG format and 160x120pixels of size are recommended thumbnail format for Exif2.1 or later.\n\n        if (thumbTags['Compression']) {\n            // console.log('Thumbnail image found!');\n\n            switch (thumbTags['Compression']) {\n                case 6:\n                    // console.log('Thumbnail image format is JPEG');\n                    if (thumbTags.JpegIFOffset && thumbTags.JpegIFByteCount) {\n                    // extract the thumbnail\n                        var tOffset = tiffStart + thumbTags.JpegIFOffset;\n                        var tLength = thumbTags.JpegIFByteCount;\n                        thumbTags['blob'] = new Blob([new Uint8Array(dataView.buffer, tOffset, tLength)], {\n                            type: 'image/jpeg'\n                        });\n                    }\n                break;\n\n            case 1:\n                console.log(\"Thumbnail image format is TIFF, which is not implemented.\");\n                break;\n            default:\n                console.log(\"Unknown thumbnail image format '%s'\", thumbTags['Compression']);\n            }\n        }\n        else if (thumbTags['PhotometricInterpretation'] == 2) {\n            console.log(\"Thumbnail image format is RGB, which is not implemented.\");\n        }\n        return thumbTags;\n    }\n\n    function getStringFromDB(buffer, start, length) {\n        var outstr = \"\";\n        for (n = start; n < start+length; n++) {\n            outstr += String.fromCharCode(buffer.getUint8(n));\n        }\n        return outstr;\n    }\n\n    function readEXIFData(file, start) {\n        if (getStringFromDB(file, start, 4) != \"Exif\") {\n            if (debug) console.log(\"Not valid EXIF data! \" + getStringFromDB(file, start, 4));\n            return false;\n        }\n\n        var bigEnd,\n            tags, tag,\n            exifData, gpsData,\n            tiffOffset = start + 6;\n\n        // test for TIFF validity and endianness\n        if (file.getUint16(tiffOffset) == 0x4949) {\n            bigEnd = false;\n        } else if (file.getUint16(tiffOffset) == 0x4D4D) {\n            bigEnd = true;\n        } else {\n            if (debug) console.log(\"Not valid TIFF data! (no 0x4949 or 0x4D4D)\");\n            return false;\n        }\n\n        if (file.getUint16(tiffOffset+2, !bigEnd) != 0x002A) {\n            if (debug) console.log(\"Not valid TIFF data! (no 0x002A)\");\n            return false;\n        }\n\n        var firstIFDOffset = file.getUint32(tiffOffset+4, !bigEnd);\n\n        if (firstIFDOffset < 0x00000008) {\n            if (debug) console.log(\"Not valid TIFF data! (First offset less than 8)\", file.getUint32(tiffOffset+4, !bigEnd));\n            return false;\n        }\n\n        tags = readTags(file, tiffOffset, tiffOffset + firstIFDOffset, TiffTags, bigEnd);\n\n        if (tags.ExifIFDPointer) {\n            exifData = readTags(file, tiffOffset, tiffOffset + tags.ExifIFDPointer, ExifTags, bigEnd);\n            for (tag in exifData) {\n                switch (tag) {\n                    case \"LightSource\" :\n                    case \"Flash\" :\n                    case \"MeteringMode\" :\n                    case \"ExposureProgram\" :\n                    case \"SensingMethod\" :\n                    case \"SceneCaptureType\" :\n                    case \"SceneType\" :\n                    case \"CustomRendered\" :\n                    case \"WhiteBalance\" :\n                    case \"GainControl\" :\n                    case \"Contrast\" :\n                    case \"Saturation\" :\n                    case \"Sharpness\" :\n                    case \"SubjectDistanceRange\" :\n                    case \"FileSource\" :\n                        exifData[tag] = StringValues[tag][exifData[tag]];\n                        break;\n\n                    case \"ExifVersion\" :\n                    case \"FlashpixVersion\" :\n                        exifData[tag] = String.fromCharCode(exifData[tag][0], exifData[tag][1], exifData[tag][2], exifData[tag][3]);\n                        break;\n\n                    case \"ComponentsConfiguration\" :\n                        exifData[tag] =\n                            StringValues.Components[exifData[tag][0]] +\n                            StringValues.Components[exifData[tag][1]] +\n                            StringValues.Components[exifData[tag][2]] +\n                            StringValues.Components[exifData[tag][3]];\n                        break;\n                }\n                tags[tag] = exifData[tag];\n            }\n        }\n\n        if (tags.GPSInfoIFDPointer) {\n            gpsData = readTags(file, tiffOffset, tiffOffset + tags.GPSInfoIFDPointer, GPSTags, bigEnd);\n            for (tag in gpsData) {\n                switch (tag) {\n                    case \"GPSVersionID\" :\n                        gpsData[tag] = gpsData[tag][0] +\n                            \".\" + gpsData[tag][1] +\n                            \".\" + gpsData[tag][2] +\n                            \".\" + gpsData[tag][3];\n                        break;\n                }\n                tags[tag] = gpsData[tag];\n            }\n        }\n\n        // extract thumbnail\n        tags['thumbnail'] = readThumbnailImage(file, tiffOffset, firstIFDOffset, bigEnd);\n\n        return tags;\n    }\n\n   function findXMPinJPEG(file) {\n\n        if (!('DOMParser' in self)) {\n            // console.warn('XML parsing not supported without DOMParser');\n            return;\n        }\n        var dataView = new DataView(file);\n\n        if (debug) console.log(\"Got file of length \" + file.byteLength);\n        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\n           if (debug) console.log(\"Not a valid JPEG\");\n           return false; // not a valid jpeg\n        }\n\n        var offset = 2,\n            length = file.byteLength,\n            dom = new DOMParser();\n\n        while (offset < (length-4)) {\n            if (getStringFromDB(dataView, offset, 4) == \"http\") {\n                var startOffset = offset - 1;\n                var sectionLength = dataView.getUint16(offset - 2) - 1;\n                var xmpString = getStringFromDB(dataView, startOffset, sectionLength)\n                var xmpEndIndex = xmpString.indexOf('xmpmeta>') + 8;\n                xmpString = xmpString.substring( xmpString.indexOf( '<x:xmpmeta' ), xmpEndIndex );\n\n                var indexOfXmp = xmpString.indexOf('x:xmpmeta') + 10\n                //Many custom written programs embed xmp/xml without any namespace. Following are some of them.\n                //Without these namespaces, XML is thought to be invalid by parsers\n                xmpString = xmpString.slice(0, indexOfXmp)\n                            + 'xmlns:Iptc4xmpCore=\"http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/\" '\n                            + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" '\n                            + 'xmlns:tiff=\"http://ns.adobe.com/tiff/1.0/\" '\n                            + 'xmlns:plus=\"http://schemas.android.com/apk/lib/com.google.android.gms.plus\" '\n                            + 'xmlns:ext=\"http://www.gettyimages.com/xsltExtension/1.0\" '\n                            + 'xmlns:exif=\"http://ns.adobe.com/exif/1.0/\" '\n                            + 'xmlns:stEvt=\"http://ns.adobe.com/xap/1.0/sType/ResourceEvent#\" '\n                            + 'xmlns:stRef=\"http://ns.adobe.com/xap/1.0/sType/ResourceRef#\" '\n                            + 'xmlns:crs=\"http://ns.adobe.com/camera-raw-settings/1.0/\" '\n                            + 'xmlns:xapGImg=\"http://ns.adobe.com/xap/1.0/g/img/\" '\n                            + 'xmlns:Iptc4xmpExt=\"http://iptc.org/std/Iptc4xmpExt/2008-02-29/\" '\n                            + xmpString.slice(indexOfXmp)\n\n                var domDocument = dom.parseFromString( xmpString, 'text/xml' );\n                return xml2Object(domDocument);\n            } else{\n             offset++;\n            }\n        }\n    }\n\n    function xml2json(xml) {\n        var json = {};\n      \n        if (xml.nodeType == 1) { // element node\n          if (xml.attributes.length > 0) {\n            json['@attributes'] = {};\n            for (var j = 0; j < xml.attributes.length; j++) {\n              var attribute = xml.attributes.item(j);\n              json['@attributes'][attribute.nodeName] = attribute.nodeValue;\n            }\n          }\n        } else if (xml.nodeType == 3) { // text node\n          return xml.nodeValue;\n        }\n      \n        // deal with children\n        if (xml.hasChildNodes()) {\n          for(var i = 0; i < xml.childNodes.length; i++) {\n            var child = xml.childNodes.item(i);\n            var nodeName = child.nodeName;\n            if (json[nodeName] == null) {\n              json[nodeName] = xml2json(child);\n            } else {\n              if (json[nodeName].push == null) {\n                var old = json[nodeName];\n                json[nodeName] = [];\n                json[nodeName].push(old);\n              }\n              json[nodeName].push(xml2json(child));\n            }\n          }\n        }\n        \n        return json;\n    }\n\n    function xml2Object(xml) {\n        try {\n            var obj = {};\n            if (xml.children.length > 0) {\n              for (var i = 0; i < xml.children.length; i++) {\n                var item = xml.children.item(i);\n                var attributes = item.attributes;\n                for(var idx in attributes) {\n                    var itemAtt = attributes[idx];\n                    var dataKey = itemAtt.nodeName;\n                    var dataValue = itemAtt.nodeValue;\n\n                    if(dataKey !== undefined) {\n                        obj[dataKey] = dataValue;\n                    }\n                }\n                var nodeName = item.nodeName;\n\n                if (typeof (obj[nodeName]) == \"undefined\") {\n                  obj[nodeName] = xml2json(item);\n                } else {\n                  if (typeof (obj[nodeName].push) == \"undefined\") {\n                    var old = obj[nodeName];\n\n                    obj[nodeName] = [];\n                    obj[nodeName].push(old);\n                  }\n                  obj[nodeName].push(xml2json(item));\n                }\n              }\n            } else {\n              obj = xml.textContent;\n            }\n            return obj;\n          } catch (e) {\n              console.log(e.message);\n          }\n    }\n\n    EXIF.enableXmp = function() {\n        EXIF.isXmpEnabled = true;\n    }\n\n    EXIF.disableXmp = function() {\n        EXIF.isXmpEnabled = false;\n    }\n\n    EXIF.getData = function(img, callback) {\n        if (((self.Image && img instanceof self.Image)\n            || (self.HTMLImageElement && img instanceof self.HTMLImageElement))\n            && !img.complete)\n            return false;\n\n        if (!imageHasData(img)) {\n            getImageData(img, callback);\n        } else {\n            if (callback) {\n                callback.call(img);\n            }\n        }\n        return true;\n    }\n\n    EXIF.getTag = function(img, tag) {\n        if (!imageHasData(img)) return;\n        return img.exifdata[tag];\n    }\n    \n    EXIF.getIptcTag = function(img, tag) {\n        if (!imageHasData(img)) return;\n        return img.iptcdata[tag];\n    }\n\n    EXIF.getAllTags = function(img) {\n        if (!imageHasData(img)) return {};\n        var a,\n            data = img.exifdata,\n            tags = {};\n        for (a in data) {\n            if (data.hasOwnProperty(a)) {\n                tags[a] = data[a];\n            }\n        }\n        return tags;\n    }\n    \n    EXIF.getAllIptcTags = function(img) {\n        if (!imageHasData(img)) return {};\n        var a,\n            data = img.iptcdata,\n            tags = {};\n        for (a in data) {\n            if (data.hasOwnProperty(a)) {\n                tags[a] = data[a];\n            }\n        }\n        return tags;\n    }\n\n    EXIF.pretty = function(img) {\n        if (!imageHasData(img)) return \"\";\n        var a,\n            data = img.exifdata,\n            strPretty = \"\";\n        for (a in data) {\n            if (data.hasOwnProperty(a)) {\n                if (typeof data[a] == \"object\") {\n                    if (data[a] instanceof Number) {\n                        strPretty += a + \" : \" + data[a] + \" [\" + data[a].numerator + \"/\" + data[a].denominator + \"]\\r\\n\";\n                    } else {\n                        strPretty += a + \" : [\" + data[a].length + \" values]\\r\\n\";\n                    }\n                } else {\n                    strPretty += a + \" : \" + data[a] + \"\\r\\n\";\n                }\n            }\n        }\n        return strPretty;\n    }\n\n    EXIF.readFromBinaryFile = function(file) {\n        return findEXIFinJPEG(file);\n    }\n\n    if (typeof define === 'function' && define.amd) {\n        define('exif-js', [], function() {\n            return EXIF;\n        });\n    }\n}.call(this));\n\n","let EXIF = require(\"exif-js\")\r\nconst getURLBase64 = function(url) {\r\n    return new Promise((resolve, reject) => {\r\n        let xhr = new XMLHttpRequest()\r\n        xhr.open('get', url, true)\r\n        xhr.responseType = 'blob'\r\n        xhr.onload = function() {\r\n            if (this.status === 200) {\r\n                let blob = this.response\r\n                let fileReader = new FileReader()\r\n                fileReader.onloadend = function(e) {\r\n                    let result = e.target.result\r\n                    resolve(result)\r\n                }\r\n                fileReader.readAsDataURL(blob)\r\n            }\r\n        }\r\n        xhr.onerror = function(err) {\r\n            reject(err)\r\n        }\r\n        xhr.send()\r\n    })\r\n}\r\n\r\nconst getOri = function(file) {\r\n    return new Promise(resolve => {\r\n        EXIF.getData(file, function() {\r\n            let orientation = EXIF.getTag(this, \"Orientation\");\r\n            resolve(orientation)\r\n        });\r\n    })\r\n}\r\n\r\nconst imgToCanvas = function(img, orientation) {\r\n    const canvas = document.createElement('canvas'),\r\n        ctx = canvas.getContext('2d'),\r\n        targetWidth = img.targetWidth || img.width,\r\n        targetHeight = img.targetHeight || img.height;\r\n    \r\n    if (orientation === 6) {\r\n        canvas.width = targetHeight;\r\n        canvas.height = targetWidth;\r\n        ctx.translate(canvas.width / 2, canvas.height / 2);\r\n        ctx.rotate(Math.PI / 180 * 90);\r\n        ctx.drawImage(img, -targetWidth / 2, -targetHeight / 2, canvas.height, canvas.width);\r\n    } else {\r\n        canvas.width = targetWidth;\r\n        canvas.height = targetHeight;\r\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n    }\r\n\r\n    return new Promise(resolve => {\r\n        resolve(canvas)\r\n    })\r\n}\r\n\r\nexport const fixBySelector = function(selector) {\r\n    const fixImg = function(img) {\r\n        if (!img.dataset.iosfixed) {\r\n            getOri(img).then(orientation => {\r\n                if (orientation == 6) {\r\n                    imgToCanvas(img, orientation).then(canvas => {\r\n                        try{\r\n                            img.src = canvas.toDataURL();\r\n                            img.dataset.iosfixed = true;\r\n                        }catch(e) {\r\n                            getURLBase64(img.src).then(base64 => {\r\n                                img.onload = function() {\r\n                                    if (!img.dataset.iosfixed) {\r\n                                        imgToCanvas(img, orientation).then(canvas => {\r\n                                            img.src = canvas.toDataURL();\r\n                                            img.dataset.iosfixed = true\r\n                                        })\r\n                                    }\r\n                                }\r\n                                img.src = base64;\r\n                            })\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n    let imgs = document.querySelectorAll(selector)\r\n    if (imgs.length) {\r\n        for (let i = 0; i < imgs.length; i++) {\r\n            let img = imgs[i]\r\n            if (img.tagName.toLowerCase() === 'img') {\r\n                img.crossOrigin = \"Anonymous\";\r\n                if (img.complete) {\r\n                    fixImg(img)\r\n                } else {\r\n                    img.onload = function() {\r\n                        fixImg(img)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    } else {\r\n        console.log('fixer WARN no files:' + selector)\r\n    }\r\n}\r\n\r\nconst computeSize = function(originWidth, originHeight, maxWidth, maxHeight) {\r\n    let targetWidth = originWidth,\r\n        targetHeight = originHeight;\r\n    const setWidth = function() {\r\n            targetWidth = maxWidth;\r\n            targetHeight = Math.round(maxWidth * (originHeight / originWidth));\r\n        },\r\n        setHeight = function() {\r\n            targetHeight = maxHeight;\r\n            targetWidth = Math.round(maxHeight * (originWidth / originHeight));\r\n        }\r\n\r\n    if (maxWidth && maxHeight) {\r\n        //限定区间\r\n        if (originWidth > maxWidth || originHeight > maxHeight) {\r\n            if (originWidth / originHeight > maxWidth / maxHeight) {\r\n                // 更宽\r\n                setWidth()\r\n            } else {\r\n                // 更高\r\n                setHeight()\r\n            }\r\n        }\r\n    } else if (maxWidth) {\r\n        //限定宽度\r\n        setWidth()\r\n    } else if (maxHeight) {\r\n        //限定高度\r\n        setHeight()\r\n    }\r\n\r\n    return {\r\n        width: targetWidth,\r\n        height: targetHeight\r\n    }\r\n}\r\n\r\nexport const fixImgFile = function(file, option) {\r\n    const opt = Object.assign({\r\n        ratio: 2\r\n    }, option || {})\r\n\r\n    return new Promise((resolve, reject) => {\r\n        if (file.type.indexOf('image') === 0) {\r\n            getOri(file).then(orientation => {\r\n                let oReader = new FileReader();\r\n                oReader.onload = function(e) {\r\n                    let base64 = e.target.result;\r\n                    let img = document.createElement('img');\r\n\r\n                    img.onload = function() {\r\n                        if (opt.width || opt.height) {\r\n                            let compressSize;\r\n                            if (orientation === 6) {\r\n                                compressSize = computeSize(img.height, img.width, opt.width, opt.height)\r\n                                img.targetWidth = compressSize.height;\r\n                                img.targetHeight = compressSize.width;\r\n                            } else {\r\n                                compressSize = computeSize(img.width, img.height, opt.width, opt.height)\r\n                                img.targetWidth = compressSize.width;\r\n                                img.targetHeight = compressSize.height;\r\n                            }\r\n\r\n                        }\r\n                        imgToCanvas(img, orientation).then(canvas => {\r\n                            resolve(canvas.toDataURL('image/jpeg', opt.ratio))\r\n                        })\r\n                    }\r\n                    img.src = base64;\r\n                }\r\n                oReader.readAsDataURL(file);\r\n            }).catch(err => {\r\n                reject(err)\r\n            })\r\n        }else{\r\n            reject('非图片文件不支持压缩')\r\n        }\r\n    })\r\n\r\n}"]}